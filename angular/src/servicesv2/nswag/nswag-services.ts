//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class UserServices {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    registerUser(user: CustomerDto): Observable<ApiResponseMessageOfString> {
        let url_ = this.baseUrl + "/api/User/RegisterUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(user);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegisterUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegisterUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfString>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfString>;
        }));
    }

    protected processRegisterUser(response: HttpResponseBase): Observable<ApiResponseMessageOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfString.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    registerAdmin(user: RegisterUserDto): Observable<ApiResponseMessageOfString> {
        let url_ = this.baseUrl + "/api/User/RegisterAdmin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(user);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegisterAdmin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegisterAdmin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfString>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfString>;
        }));
    }

    protected processRegisterAdmin(response: HttpResponseBase): Observable<ApiResponseMessageOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfString.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    login(user: RegisterUserDto): Observable<ApiResponseMessageOfUserLoginDto> {
        let url_ = this.baseUrl + "/api/User/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(user);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfUserLoginDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfUserLoginDto>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<ApiResponseMessageOfUserLoginDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfUserLoginDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllRoles(): Observable<ApiResponseMessageOfGetAllRolesDto> {
        let url_ = this.baseUrl + "/api/User/GetAllRoles";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllRoles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllRoles(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfGetAllRolesDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfGetAllRolesDto>;
        }));
    }

    protected processGetAllRoles(response: HttpResponseBase): Observable<ApiResponseMessageOfGetAllRolesDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfGetAllRolesDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllUser(dto: PagedSortedDto): Observable<ApiResponseMessageOfIListOfGetAllUserDto> {
        let url_ = this.baseUrl + "/api/User/GetAllUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfIListOfGetAllUserDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfIListOfGetAllUserDto>;
        }));
    }

    protected processGetAllUser(response: HttpResponseBase): Observable<ApiResponseMessageOfIListOfGetAllUserDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfIListOfGetAllUserDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    addOrRemoveRoles(dto: AddOrRemoveRolesDto): Observable<ApiResponseMessageOfString> {
        let url_ = this.baseUrl + "/api/User/AddOrRemoveRoles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddOrRemoveRoles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddOrRemoveRoles(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfString>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfString>;
        }));
    }

    protected processAddOrRemoveRoles(response: HttpResponseBase): Observable<ApiResponseMessageOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfString.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAvaialbleRoles(id: string | undefined): Observable<ApiResponseMessageOfIListOfGetAvaialbleRolesDto> {
        let url_ = this.baseUrl + "/api/User/GetAvaialbleRoles?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAvaialbleRoles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAvaialbleRoles(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfIListOfGetAvaialbleRolesDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfIListOfGetAvaialbleRolesDto>;
        }));
    }

    protected processGetAvaialbleRoles(response: HttpResponseBase): Observable<ApiResponseMessageOfIListOfGetAvaialbleRolesDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfIListOfGetAvaialbleRolesDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class CanteenServices {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    createOrEditCustomer(dto: CustomerDto): Observable<ApiResponseMessageOfString> {
        let url_ = this.baseUrl + "/api/Canteen/CreateOrEditCustomer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEditCustomer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEditCustomer(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfString>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfString>;
        }));
    }

    protected processCreateOrEditCustomer(response: HttpResponseBase): Observable<ApiResponseMessageOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfString.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createOrEditMenuCategory(dto: CreateOrEditMenuCategoryDto): Observable<ApiResponseMessageOfString> {
        let url_ = this.baseUrl + "/api/Canteen/CreateOrEditMenuCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEditMenuCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEditMenuCategory(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfString>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfString>;
        }));
    }

    protected processCreateOrEditMenuCategory(response: HttpResponseBase): Observable<ApiResponseMessageOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfString.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createOrEditMenuItems(id: string | null | undefined, categoryId: string | undefined, itemName: string | null | undefined, itemDesc: string | null | undefined, price: number | undefined, stockQuantity: number | undefined, file: FileParameter | null | undefined): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Canteen/CreateOrEditMenuItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (id !== null && id !== undefined)
            content_.append("Id", id.toString());
        if (categoryId === null || categoryId === undefined)
            throw new Error("The parameter 'categoryId' cannot be null.");
        else
            content_.append("CategoryId", categoryId.toString());
        if (itemName !== null && itemName !== undefined)
            content_.append("ItemName", itemName.toString());
        if (itemDesc !== null && itemDesc !== undefined)
            content_.append("ItemDesc", itemDesc.toString());
        if (price === null || price === undefined)
            throw new Error("The parameter 'price' cannot be null.");
        else
            content_.append("Price", price.toString());
        if (stockQuantity === null || stockQuantity === undefined)
            throw new Error("The parameter 'stockQuantity' cannot be null.");
        else
            content_.append("StockQuantity", stockQuantity.toString());
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEditMenuItems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEditMenuItems(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processCreateOrEditMenuItems(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllOrGetAllById(id: string | null | undefined): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Canteen/GetAllOrGetAllById?";
        if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllOrGetAllById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllOrGetAllById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processGetAllOrGetAllById(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllMenuCategory(): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Canteen/GetAllMenuCategory";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllMenuCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllMenuCategory(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processGetAllMenuCategory(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllMenuCategory1(pageIndex: number | undefined, pageSize: number | undefined, searchstring: string | null | undefined): Observable<ApiResponseMessageOfIListOfGetAllMenuCategoryDto> {
        let url_ = this.baseUrl + "/api/Canteen/GetAllMenuCategory1?";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (searchstring !== undefined && searchstring !== null)
            url_ += "searchstring=" + encodeURIComponent("" + searchstring) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllMenuCategory1(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllMenuCategory1(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfIListOfGetAllMenuCategoryDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfIListOfGetAllMenuCategoryDto>;
        }));
    }

    protected processGetAllMenuCategory1(response: HttpResponseBase): Observable<ApiResponseMessageOfIListOfGetAllMenuCategoryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfIListOfGetAllMenuCategoryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getMenuItemById(id: string | undefined): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Canteen/GetMenuItemById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMenuItemById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMenuItemById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processGetMenuItemById(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createUserOrders(dto: CreateOrEditOrdersDto): Observable<ApiResponseMessageOfString> {
        let url_ = this.baseUrl + "/api/Canteen/CreateUserOrders";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateUserOrders(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateUserOrders(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfString>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfString>;
        }));
    }

    protected processCreateUserOrders(response: HttpResponseBase): Observable<ApiResponseMessageOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfString.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getUserOrder(dto: GetUserOrderParams): Observable<ApiResponseMessageOfListOfGetUserItemHeader> {
        let url_ = this.baseUrl + "/api/Canteen/GetUserOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserOrder(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserOrder(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfListOfGetUserItemHeader>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfListOfGetUserItemHeader>;
        }));
    }

    protected processGetUserOrder(response: HttpResponseBase): Observable<ApiResponseMessageOfListOfGetUserItemHeader> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfListOfGetUserItemHeader.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllUserOrder(): Observable<ApiResponseMessageOfIListOfGetAllUserItemHeaderDto> {
        let url_ = this.baseUrl + "/api/Canteen/GetAllUserOrder";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllUserOrder(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllUserOrder(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfIListOfGetAllUserItemHeaderDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfIListOfGetAllUserItemHeaderDto>;
        }));
    }

    protected processGetAllUserOrder(response: HttpResponseBase): Observable<ApiResponseMessageOfIListOfGetAllUserItemHeaderDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfIListOfGetAllUserItemHeaderDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateOrderDetails(dto: UpdateOrderDetailsDto): Observable<ApiResponseMessageOfString> {
        let url_ = this.baseUrl + "/api/Canteen/UpdateOrderDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateOrderDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateOrderDetails(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfString>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfString>;
        }));
    }

    protected processUpdateOrderDetails(response: HttpResponseBase): Observable<ApiResponseMessageOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfString.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class ApiResponseMessageOfString implements IApiResponseMessageOfString {
    data!: string;
    isSuccess!: boolean;
    errorMessage!: string;

    constructor(data?: IApiResponseMessageOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"];
            this.isSuccess = _data["isSuccess"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponseMessageOfString {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseMessageOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data;
        data["isSuccess"] = this.isSuccess;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponseMessageOfString {
    data: string;
    isSuccess: boolean;
    errorMessage: string;
}

export class CustomerDto implements ICustomerDto {
    id!: string | undefined;
    firstName!: string | undefined;
    lastname!: string | undefined;
    email!: string | undefined;
    phoneNumber!: string | undefined;
    userName!: string | undefined;
    password!: string | undefined;

    constructor(data?: ICustomerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastname = _data["lastname"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.userName = _data["userName"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): CustomerDto {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastname"] = this.lastname;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data;
    }
}

export interface ICustomerDto {
    id: string | undefined;
    firstName: string | undefined;
    lastname: string | undefined;
    email: string | undefined;
    phoneNumber: string | undefined;
    userName: string | undefined;
    password: string | undefined;
}

export class RegisterUserDto implements IRegisterUserDto {
    userName!: string;
    password!: string;

    constructor(data?: IRegisterUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): RegisterUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data;
    }
}

export interface IRegisterUserDto {
    userName: string;
    password: string;
}

export class ApiResponseMessageOfUserLoginDto implements IApiResponseMessageOfUserLoginDto {
    data!: UserLoginDto;
    isSuccess!: boolean;
    errorMessage!: string;

    constructor(data?: IApiResponseMessageOfUserLoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new UserLoginDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? UserLoginDto.fromJS(_data["data"]) : new UserLoginDto();
            this.isSuccess = _data["isSuccess"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponseMessageOfUserLoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseMessageOfUserLoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["isSuccess"] = this.isSuccess;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponseMessageOfUserLoginDto {
    data: UserLoginDto;
    isSuccess: boolean;
    errorMessage: string;
}

export class UserLoginDto implements IUserLoginDto {
    userID!: string;
    userName!: string;
    userToken!: string;
    newRefreshToken!: string;
    userRole!: string[];

    constructor(data?: IUserLoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userID = _data["userID"];
            this.userName = _data["userName"];
            this.userToken = _data["userToken"];
            this.newRefreshToken = _data["newRefreshToken"];
            if (Array.isArray(_data["userRole"])) {
                this.userRole = [] as any;
                for (let item of _data["userRole"])
                    this.userRole!.push(item);
            }
        }
    }

    static fromJS(data: any): UserLoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userID"] = this.userID;
        data["userName"] = this.userName;
        data["userToken"] = this.userToken;
        data["newRefreshToken"] = this.newRefreshToken;
        if (Array.isArray(this.userRole)) {
            data["userRole"] = [];
            for (let item of this.userRole)
                data["userRole"].push(item);
        }
        return data;
    }
}

export interface IUserLoginDto {
    userID: string;
    userName: string;
    userToken: string;
    newRefreshToken: string;
    userRole: string[];
}

export class ApiResponseMessageOfGetAllRolesDto implements IApiResponseMessageOfGetAllRolesDto {
    data!: GetAllRolesDto;
    isSuccess!: boolean;
    errorMessage!: string;

    constructor(data?: IApiResponseMessageOfGetAllRolesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new GetAllRolesDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? GetAllRolesDto.fromJS(_data["data"]) : new GetAllRolesDto();
            this.isSuccess = _data["isSuccess"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponseMessageOfGetAllRolesDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseMessageOfGetAllRolesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["isSuccess"] = this.isSuccess;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponseMessageOfGetAllRolesDto {
    data: GetAllRolesDto;
    isSuccess: boolean;
    errorMessage: string;
}

export class GetAllRolesDto implements IGetAllRolesDto {
    userRoleName!: string;

    constructor(data?: IGetAllRolesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userRoleName = _data["userRoleName"];
        }
    }

    static fromJS(data: any): GetAllRolesDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllRolesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userRoleName"] = this.userRoleName;
        return data;
    }
}

export interface IGetAllRolesDto {
    userRoleName: string;
}

export class ApiResponseMessageOfIListOfGetAllUserDto implements IApiResponseMessageOfIListOfGetAllUserDto {
    data!: GetAllUserDto[];
    isSuccess!: boolean;
    errorMessage!: string;

    constructor(data?: IApiResponseMessageOfIListOfGetAllUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(GetAllUserDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponseMessageOfIListOfGetAllUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseMessageOfIListOfGetAllUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponseMessageOfIListOfGetAllUserDto {
    data: GetAllUserDto[];
    isSuccess: boolean;
    errorMessage: string;
}

export class GetAllUserDto implements IGetAllUserDto {
    customerId!: string;
    userId!: string;
    firstName!: string;
    lastName!: string;
    email!: string;
    phoneNumber!: string;
    gender!: string | undefined;
    birthdate!: string | undefined;
    civilStatus!: string | undefined;
    totalRecords!: number;
    roles!: string[];

    constructor(data?: IGetAllUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customerId = _data["customerId"];
            this.userId = _data["userId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.gender = _data["gender"];
            this.birthdate = _data["birthdate"];
            this.civilStatus = _data["civilStatus"];
            this.totalRecords = _data["totalRecords"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
        }
    }

    static fromJS(data: any): GetAllUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["userId"] = this.userId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["gender"] = this.gender;
        data["birthdate"] = this.birthdate;
        data["civilStatus"] = this.civilStatus;
        data["totalRecords"] = this.totalRecords;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        return data;
    }
}

export interface IGetAllUserDto {
    customerId: string;
    userId: string;
    firstName: string;
    lastName: string;
    email: string;
    phoneNumber: string;
    gender: string | undefined;
    birthdate: string | undefined;
    civilStatus: string | undefined;
    totalRecords: number;
    roles: string[];
}

export class PagedSortedDto implements IPagedSortedDto {
    pageIndex!: number;
    pageSize!: number;
    searchstring!: string;

    constructor(data?: IPagedSortedDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.searchstring = _data["searchstring"];
        }
    }

    static fromJS(data: any): PagedSortedDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedSortedDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["searchstring"] = this.searchstring;
        return data;
    }
}

export interface IPagedSortedDto {
    pageIndex: number;
    pageSize: number;
    searchstring: string;
}

export class AddOrRemoveRolesDto implements IAddOrRemoveRolesDto {
    userId!: string;
    role!: string;
    buttonClick!: number;

    constructor(data?: IAddOrRemoveRolesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.role = _data["role"];
            this.buttonClick = _data["buttonClick"];
        }
    }

    static fromJS(data: any): AddOrRemoveRolesDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrRemoveRolesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["role"] = this.role;
        data["buttonClick"] = this.buttonClick;
        return data;
    }
}

export interface IAddOrRemoveRolesDto {
    userId: string;
    role: string;
    buttonClick: number;
}

export class ApiResponseMessageOfIListOfGetAvaialbleRolesDto implements IApiResponseMessageOfIListOfGetAvaialbleRolesDto {
    data!: GetAvaialbleRolesDto[];
    isSuccess!: boolean;
    errorMessage!: string;

    constructor(data?: IApiResponseMessageOfIListOfGetAvaialbleRolesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(GetAvaialbleRolesDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponseMessageOfIListOfGetAvaialbleRolesDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseMessageOfIListOfGetAvaialbleRolesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponseMessageOfIListOfGetAvaialbleRolesDto {
    data: GetAvaialbleRolesDto[];
    isSuccess: boolean;
    errorMessage: string;
}

export class GetAvaialbleRolesDto implements IGetAvaialbleRolesDto {
    roleName!: string[];

    constructor(data?: IGetAvaialbleRolesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["roleName"])) {
                this.roleName = [] as any;
                for (let item of _data["roleName"])
                    this.roleName!.push(item);
            }
        }
    }

    static fromJS(data: any): GetAvaialbleRolesDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAvaialbleRolesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.roleName)) {
            data["roleName"] = [];
            for (let item of this.roleName)
                data["roleName"].push(item);
        }
        return data;
    }
}

export interface IGetAvaialbleRolesDto {
    roleName: string[];
}

export class CreateOrEditMenuCategoryDto implements ICreateOrEditMenuCategoryDto {
    id!: string | undefined;
    categoryName!: string;

    constructor(data?: ICreateOrEditMenuCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.categoryName = _data["categoryName"];
        }
    }

    static fromJS(data: any): CreateOrEditMenuCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditMenuCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["categoryName"] = this.categoryName;
        return data;
    }
}

export interface ICreateOrEditMenuCategoryDto {
    id: string | undefined;
    categoryName: string;
}

export class ApiResponseMessageOfIListOfGetAllMenuCategoryDto implements IApiResponseMessageOfIListOfGetAllMenuCategoryDto {
    data!: GetAllMenuCategoryDto[];
    isSuccess!: boolean;
    errorMessage!: string;

    constructor(data?: IApiResponseMessageOfIListOfGetAllMenuCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(GetAllMenuCategoryDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponseMessageOfIListOfGetAllMenuCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseMessageOfIListOfGetAllMenuCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponseMessageOfIListOfGetAllMenuCategoryDto {
    data: GetAllMenuCategoryDto[];
    isSuccess: boolean;
    errorMessage: string;
}

export class GetAllMenuCategoryDto implements IGetAllMenuCategoryDto {
    id!: string;
    categoryName!: string;
    totalRecords!: number;

    constructor(data?: IGetAllMenuCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.categoryName = _data["categoryName"];
            this.totalRecords = _data["totalRecords"];
        }
    }

    static fromJS(data: any): GetAllMenuCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllMenuCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["categoryName"] = this.categoryName;
        data["totalRecords"] = this.totalRecords;
        return data;
    }
}

export interface IGetAllMenuCategoryDto {
    id: string;
    categoryName: string;
    totalRecords: number;
}

export class CreateOrEditOrdersDto implements ICreateOrEditOrdersDto {
    customerId!: string;
    staffId!: string;
    items!: CreateOrEditItemDto[];
    paymentMethod!: string;

    constructor(data?: ICreateOrEditOrdersDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customerId = _data["customerId"];
            this.staffId = _data["staffId"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CreateOrEditItemDto.fromJS(item));
            }
            this.paymentMethod = _data["paymentMethod"];
        }
    }

    static fromJS(data: any): CreateOrEditOrdersDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditOrdersDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["staffId"] = this.staffId;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["paymentMethod"] = this.paymentMethod;
        return data;
    }
}

export interface ICreateOrEditOrdersDto {
    customerId: string;
    staffId: string;
    items: CreateOrEditItemDto[];
    paymentMethod: string;
}

export class CreateOrEditItemDto implements ICreateOrEditItemDto {
    itemId!: string;
    quantity!: number;

    constructor(data?: ICreateOrEditItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.itemId = _data["itemId"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): CreateOrEditItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemId"] = this.itemId;
        data["quantity"] = this.quantity;
        return data;
    }
}

export interface ICreateOrEditItemDto {
    itemId: string;
    quantity: number;
}

export class ApiResponseMessageOfListOfGetUserItemHeader implements IApiResponseMessageOfListOfGetUserItemHeader {
    data!: GetUserItemHeader[];
    isSuccess!: boolean;
    errorMessage!: string;

    constructor(data?: IApiResponseMessageOfListOfGetUserItemHeader) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(GetUserItemHeader.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponseMessageOfListOfGetUserItemHeader {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseMessageOfListOfGetUserItemHeader();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponseMessageOfListOfGetUserItemHeader {
    data: GetUserItemHeader[];
    isSuccess: boolean;
    errorMessage: string;
}

export class GetUserItemHeader implements IGetUserItemHeader {
    oderDateOrder!: Date;
    orderDate!: string;
    paymentMethod!: string;
    totalAmount!: number;
    amountPaid!: number | undefined;
    status!: number | undefined;
    orderNum!: string;
    items!: GetUserItem[];
    userLogs!: GetUserOrderLogs[];

    constructor(data?: IGetUserItemHeader) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.oderDateOrder = _data["oderDateOrder"] ? new Date(_data["oderDateOrder"].toString()) : <any>undefined;
            this.orderDate = _data["orderDate"];
            this.paymentMethod = _data["paymentMethod"];
            this.totalAmount = _data["totalAmount"];
            this.amountPaid = _data["amountPaid"];
            this.status = _data["status"];
            this.orderNum = _data["orderNum"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetUserItem.fromJS(item));
            }
            if (Array.isArray(_data["userLogs"])) {
                this.userLogs = [] as any;
                for (let item of _data["userLogs"])
                    this.userLogs!.push(GetUserOrderLogs.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetUserItemHeader {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserItemHeader();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oderDateOrder"] = this.oderDateOrder ? this.oderDateOrder.toISOString() : <any>undefined;
        data["orderDate"] = this.orderDate;
        data["paymentMethod"] = this.paymentMethod;
        data["totalAmount"] = this.totalAmount;
        data["amountPaid"] = this.amountPaid;
        data["status"] = this.status;
        data["orderNum"] = this.orderNum;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        if (Array.isArray(this.userLogs)) {
            data["userLogs"] = [];
            for (let item of this.userLogs)
                data["userLogs"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetUserItemHeader {
    oderDateOrder: Date;
    orderDate: string;
    paymentMethod: string;
    totalAmount: number;
    amountPaid: number | undefined;
    status: number | undefined;
    orderNum: string;
    items: GetUserItem[];
    userLogs: GetUserOrderLogs[];
}

export class GetUserItem implements IGetUserItem {
    categoryName!: string;
    itemName!: string;
    price!: number;
    quantity!: number;

    constructor(data?: IGetUserItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.categoryName = _data["categoryName"];
            this.itemName = _data["itemName"];
            this.price = _data["price"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): GetUserItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryName"] = this.categoryName;
        data["itemName"] = this.itemName;
        data["price"] = this.price;
        data["quantity"] = this.quantity;
        return data;
    }
}

export interface IGetUserItem {
    categoryName: string;
    itemName: string;
    price: number;
    quantity: number;
}

export class GetUserOrderLogs implements IGetUserOrderLogs {
    logsDescription!: string;
    creationTime!: string;
    status!: number | undefined;

    constructor(data?: IGetUserOrderLogs) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.logsDescription = _data["logsDescription"];
            this.creationTime = _data["creationTime"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): GetUserOrderLogs {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserOrderLogs();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["logsDescription"] = this.logsDescription;
        data["creationTime"] = this.creationTime;
        data["status"] = this.status;
        return data;
    }
}

export interface IGetUserOrderLogs {
    logsDescription: string;
    creationTime: string;
    status: number | undefined;
}

export class GetUserOrderParams implements IGetUserOrderParams {
    id!: string;
    dateFrom!: Date | undefined;
    dateTo!: Date | undefined;

    constructor(data?: IGetUserOrderParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.dateFrom = _data["dateFrom"] ? new Date(_data["dateFrom"].toString()) : <any>undefined;
            this.dateTo = _data["dateTo"] ? new Date(_data["dateTo"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GetUserOrderParams {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserOrderParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dateFrom"] = this.dateFrom ? this.dateFrom.toISOString() : <any>undefined;
        data["dateTo"] = this.dateTo ? this.dateTo.toISOString() : <any>undefined;
        return data;
    }
}

export interface IGetUserOrderParams {
    id: string;
    dateFrom: Date | undefined;
    dateTo: Date | undefined;
}

export class ApiResponseMessageOfIListOfGetAllUserItemHeaderDto implements IApiResponseMessageOfIListOfGetAllUserItemHeaderDto {
    data!: GetAllUserItemHeaderDto[];
    isSuccess!: boolean;
    errorMessage!: string;

    constructor(data?: IApiResponseMessageOfIListOfGetAllUserItemHeaderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(GetAllUserItemHeaderDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponseMessageOfIListOfGetAllUserItemHeaderDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseMessageOfIListOfGetAllUserItemHeaderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponseMessageOfIListOfGetAllUserItemHeaderDto {
    data: GetAllUserItemHeaderDto[];
    isSuccess: boolean;
    errorMessage: string;
}

export class GetAllUserItemHeaderDto implements IGetAllUserItemHeaderDto {
    oderDateOrder!: Date;
    userName!: string;
    staffName!: string;
    orderDate!: string;
    paymentMethod!: string;
    totalAmount!: number;
    amountPaid!: number | undefined;
    status!: number | undefined;
    orderNum!: string;
    paymentId!: string;
    orderId!: string;
    orderLogsId!: string | undefined;
    items!: GetAllUserItemDto[];
    userLogs!: GetAllUserOrderLogsDto[];

    constructor(data?: IGetAllUserItemHeaderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.oderDateOrder = _data["oderDateOrder"] ? new Date(_data["oderDateOrder"].toString()) : <any>undefined;
            this.userName = _data["userName"];
            this.staffName = _data["staffName"];
            this.orderDate = _data["orderDate"];
            this.paymentMethod = _data["paymentMethod"];
            this.totalAmount = _data["totalAmount"];
            this.amountPaid = _data["amountPaid"];
            this.status = _data["status"];
            this.orderNum = _data["orderNum"];
            this.paymentId = _data["paymentId"];
            this.orderId = _data["orderId"];
            this.orderLogsId = _data["orderLogsId"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetAllUserItemDto.fromJS(item));
            }
            if (Array.isArray(_data["userLogs"])) {
                this.userLogs = [] as any;
                for (let item of _data["userLogs"])
                    this.userLogs!.push(GetAllUserOrderLogsDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetAllUserItemHeaderDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllUserItemHeaderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oderDateOrder"] = this.oderDateOrder ? this.oderDateOrder.toISOString() : <any>undefined;
        data["userName"] = this.userName;
        data["staffName"] = this.staffName;
        data["orderDate"] = this.orderDate;
        data["paymentMethod"] = this.paymentMethod;
        data["totalAmount"] = this.totalAmount;
        data["amountPaid"] = this.amountPaid;
        data["status"] = this.status;
        data["orderNum"] = this.orderNum;
        data["paymentId"] = this.paymentId;
        data["orderId"] = this.orderId;
        data["orderLogsId"] = this.orderLogsId;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        if (Array.isArray(this.userLogs)) {
            data["userLogs"] = [];
            for (let item of this.userLogs)
                data["userLogs"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetAllUserItemHeaderDto {
    oderDateOrder: Date;
    userName: string;
    staffName: string;
    orderDate: string;
    paymentMethod: string;
    totalAmount: number;
    amountPaid: number | undefined;
    status: number | undefined;
    orderNum: string;
    paymentId: string;
    orderId: string;
    orderLogsId: string | undefined;
    items: GetAllUserItemDto[];
    userLogs: GetAllUserOrderLogsDto[];
}

export class GetAllUserItemDto implements IGetAllUserItemDto {
    categoryName!: string;
    itemName!: string;
    price!: number;
    quantity!: number;

    constructor(data?: IGetAllUserItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.categoryName = _data["categoryName"];
            this.itemName = _data["itemName"];
            this.price = _data["price"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): GetAllUserItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllUserItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryName"] = this.categoryName;
        data["itemName"] = this.itemName;
        data["price"] = this.price;
        data["quantity"] = this.quantity;
        return data;
    }
}

export interface IGetAllUserItemDto {
    categoryName: string;
    itemName: string;
    price: number;
    quantity: number;
}

export class GetAllUserOrderLogsDto implements IGetAllUserOrderLogsDto {
    logsDescription!: string;
    creationTime!: string;
    status!: number | undefined;

    constructor(data?: IGetAllUserOrderLogsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.logsDescription = _data["logsDescription"];
            this.creationTime = _data["creationTime"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): GetAllUserOrderLogsDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllUserOrderLogsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["logsDescription"] = this.logsDescription;
        data["creationTime"] = this.creationTime;
        data["status"] = this.status;
        return data;
    }
}

export interface IGetAllUserOrderLogsDto {
    logsDescription: string;
    creationTime: string;
    status: number | undefined;
}

export class UpdateOrderDetailsDto implements IUpdateOrderDetailsDto {
    staffId!: string;
    paymentId!: string | undefined;
    amountPaid!: number | undefined;
    orderTableId!: string | undefined;
    orderStatus!: number | undefined;
    orderLogsId!: string | undefined;
    orderLogsStatus!: number | undefined;
    buttonClick!: number;

    constructor(data?: IUpdateOrderDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.staffId = _data["staffId"];
            this.paymentId = _data["paymentId"];
            this.amountPaid = _data["amountPaid"];
            this.orderTableId = _data["orderTableId"];
            this.orderStatus = _data["orderStatus"];
            this.orderLogsId = _data["orderLogsId"];
            this.orderLogsStatus = _data["orderLogsStatus"];
            this.buttonClick = _data["buttonClick"];
        }
    }

    static fromJS(data: any): UpdateOrderDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateOrderDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["staffId"] = this.staffId;
        data["paymentId"] = this.paymentId;
        data["amountPaid"] = this.amountPaid;
        data["orderTableId"] = this.orderTableId;
        data["orderStatus"] = this.orderStatus;
        data["orderLogsId"] = this.orderLogsId;
        data["orderLogsStatus"] = this.orderLogsStatus;
        data["buttonClick"] = this.buttonClick;
        return data;
    }
}

export interface IUpdateOrderDetailsDto {
    staffId: string;
    paymentId: string | undefined;
    amountPaid: number | undefined;
    orderTableId: string | undefined;
    orderStatus: number | undefined;
    orderLogsId: string | undefined;
    orderLogsStatus: number | undefined;
    buttonClick: number;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    return _observableThrow(new ApiException(message, status, response, headers, result));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}